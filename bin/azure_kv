#!/usr/bin/env bash

source box.sh
box "Fuzzy find a secret in a Azure keyvault"

#@ usage: 
#@ author: Hieu Tran
#@ email : hieu.tran@upm.com

PROGNAME=${0##*/}

## Default values
EXIT_FAILURE=1
KEYVAULT="cdp-prod-snowflake-kv"
# KEYVAULT="cdp-azure-ad-app-secrets"
TYPE="secret"

function usage() {
    echo -e "$PROGNAME - Fuzzy find a secret in a Azure keyvault \n"
    echo -e "usage: $PROGNAME [-h] [-?] [-n keyvault] [-t type]\n"
    echo -e "   -n: Name of the keyvault."
    echo -e "   -t: Object type: [key,secret,certificate]."
    echo -e "   -h: Print this help message."
    echo -e "   -?: Print this help message."
}

function die() {
    echo "ERROR: $*" >&2
    exit $EXIT_FAILURE
}


## List of options the program will accept;
## those options that take arguments are followed by a colon
OPTSTRING='n:t:h?'

## The loop calls getopts until there are no more options on the command line
## Each option is stored in $OPT, any option arguments are stored in OPTARG
while getopts "$OPTSTRING" OPT
do
    case $OPT in
        n)
            KEYVAULT=$OPTARG ## $OPTARG contains the argument to the option
            ;;
        t)
            TYPE=$OPTARG
            if [[ ! "${TYPE}" =~ ^(key|secret|certificate)$ ]]; then
                usage >&2
                die "Invalid type"
            fi
            ;;
        *)
            usage >&2
            exit $EXIT_FAILURE
            ;;
    esac
done

## Remove options from the command line
## $OPTIND points to the next, unparsed argument
shift "$(( OPTIND - 1 ))"

NAME=$( az keyvault "${TYPE}" list --vault-name "${KEYVAULT}" | jq -r '.[] | .name' | \
    fzf \
        --ansi \
        --reverse \
        --no-mouse \
        --height 80%
)
if [ -n "${NAME}" ]; then
    az keyvault "${TYPE}" show --vault-name "${KEYVAULT}" --name "${NAME}" | jq
fi
