#!/usr/bin/env bash

source box.sh
box "List role assignments associated with an account"

#@ usage: 
#@ author: Hieu Tran
#@ email : hieu.tran@upm.com

readonly PROGNAME=${0##*/}

## Default values
EXIT_FAILURE=1
VERBOSE=${VERBOSE:-0}
ID= # email, Service Principal AppID or ObjectID
NAME= # Service Principal name
SUBSCRIPTION=''
SUBSCRIPTIONS_LIST='dev test qa prod common'
ALL_SUBSCRIPTIONS=0

function usage() {
    echo -e "$PROGNAME - \n"
    echo -e "usage: $PROGNAME [-s SUBSCRIPTION] [-h] [-?] ID\n"
    echo -e "   -s: Subscription to list. Can be either dev|test|qa|prod|common alias or custom string."
    echo -e "   -a: List in all subscriptions"
    echo -e "   -v: Verbose mode."
    echo -e "   -h: Print this help message."
    echo -e "   -?: Print this help message."
}

function die() {
    echo "ERROR: $*" >&2
    exit $EXIT_FAILURE
}

function log {
    [ ${VERBOSE} -eq 0 ] && return 0
    local readonly level="$1"
    local readonly message="$2"
    local readonly timestamp=$(date +"%Y-%m-%d %H:%M:%S")
    >&2 echo -e "${timestamp} [${level}] [$PROGNAME] ${message}"
}

function log_info {
    local readonly message="$1"
    log "INFO" "$message"
}

function log_warn {
    local readonly message="$1"
    log "WARN" "$message"
}

function log_error {
    local readonly message="$1"
    log "ERROR" "$message"
}


## List of options the program will accept;
## those options that take arguments are followed by a colon
OPTSTRING='as:vh?'

## The loop calls getopts until there are no more options on the command line
## Each option is stored in $OPT, any option arguments are stored in OPTARG
while getopts "$OPTSTRING" OPT
do
    case $OPT in
        a)
            ALL_SUBSCRIPTIONS=$(( ALL_SUBSCRIPTIONS + 1 ))
            ;;
        s)
            SUBSCRIPTION=$OPTARG ## $OPTARG contains the argument to the option
            case "$SUBSCRIPTION" in
                dev)
                    SUBSCRIPTION="UPM CDP DEV"
                    ;;
                test)
                    SUBSCRIPTION="UPM CDP TEST"
                    ;;
                qa)
                    SUBSCRIPTION="UPM CDP QA"
                    ;;
                prod)
                    SUBSCRIPTION="UPM CDP PROD"
                    ;;
                common)
                    SUBSCRIPTION="UPM CDP COMMON"
                    ;;
            esac
            ;;
        v)
            VERBOSE=$(( VERBOSE + 1 ))
            ;;
        *)
            usage >&2
            exit $EXIT_FAILURE
            ;;
    esac
done

## Remove options from the command line
## $OPTIND points to the next, unparsed argument
shift "$(( OPTIND - 1 ))"

if [ "$#" -eq 0 ]; then
    # TODO: use current logged in user if not specified ID rather than dying
    die "Missing ID"
# Heuristically detect if ID or SP name was passed
elif echo "$1" | grep -Eq "@"; then
    ID="$1"
elif echo "$1" | grep -Eq "^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$"; then
    ID="$1"
else
    NAME="$1"
    SP_LIST=$( az ad sp list --display-name "${NAME}" --query '[].{id:id}' )
    SP_COUNT=$( echo "${SP_LIST}" | jq  '. | length' )
    [ "${SP_COUNT}" -gt 1 ] && die "More than 1 SP found (${SP_COUNT}) with this name."
    ID=$( echo "${SP_LIST}" | jq -r '.[].id' )
fi

COMMAND="az role assignment list --assignee $ID --all"

if [ $ALL_SUBSCRIPTIONS -gt 0 ]; then
    "$0" -s dev "$ID"
    "$0" -s test "$ID"
    "$0" -s qa "$ID"
    "$0" -s prod "$ID"
    "$0" -s common "$ID"
    exit 0
fi

if [ -n "$SUBSCRIPTION" ]; then
    box "$SUBSCRIPTION"
    COMMAND="$COMMAND --subscription '$SUBSCRIPTION'"
fi

# set -x
OUTPUT=$( eval "$COMMAND" )

COUNT=$( echo "${OUTPUT}" | jq '. | length' )
echo "Role assginments count: ${COUNT}"

readarray -t ARRAY_OUTPUT < <( echo "$OUTPUT" | jq -C '[.[] | {createdBy,createdOn,description,resourceGroup,roleDefinitionName,scope}]' )
# readarray -t ARRAY_OUTPUT < <( echo "$OUTPUT" | jq -C '[.[] | {createdBy,createdOn,description,resourceGroup,roleDefinitionName,scope}] | sort_by(.createdOn)' )  # if need sorting by createdOn
for line in "${ARRAY_OUTPUT[@]}"; do
    if echo "${line}" | grep -q "createdBy"; then
        createdBy_id=$( echo "${line}" | cut -d '"' -f 4 )
        createdBy_displayName=$( az ad sp show --id "${createdBy_id}" 2>/dev/null | jq -r '.displayName' )
        [ -z "${createdBy_displayName}" ] && createdBy_displayName=$( az ad user show --id "${createdBy_id}" | jq -r '.userPrincipalName + " (" + .displayName + ")"' )
        echo "${line}   # ${createdBy_displayName}"
    else
        echo "${line}"
    fi
done

# TODO: list apps that has role on this resource, scope:"This resource"

# TODO: sort by types and count each type
# TODO: sort by created date and count for each deployment (based on time)
